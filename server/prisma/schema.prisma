generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  username   String?   @unique
  email      String    @unique
  firstName  String    @map("first_name")
  lastName   String    @map("last_name")
  avatarUrl  String?   @map("avatar_url")
  lastSeenAt DateTime? @map("last_seen_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  sentMessages Message[]
  chatMembers  ChatMember[]

  @@map("users")
}

model Chat {
  id        String   @id @default(cuid())
  type      ChatType
  title     String? // null for private chats
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  members  ChatMember[]
  messages Message[]

  @@map("chats")
}

model ChatMember {
  id       String   @id @default(cuid())
  chatId   String   @map("chat_id")
  userId   String   @map("user_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_members")
}

model Message {
  id        String      @id @default(cuid())
  chatId    String      @map("chat_id")
  userId    String      @map("user_id")
  content   String
  type      MessageType @default(TEXT)
  replyToId String?     @map("reply_to_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  chat    Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo Message?  @relation("MessageReply", fields: [replyToId], references: [id])
  replies Message[] @relation("MessageReply")

  @@map("messages")
}

enum ChatType {
  PRIVATE
  GROUP
  CHANNEL
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}
